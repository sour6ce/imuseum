// <auto-generated />
using System;
using IMuseum.Persistence.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMuseum.Persistence.Migrations
{
    [DbContext(typeof(SqliteIMuseumContext))]
    partial class IMuseumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("IMuseum.Persistence.Models.Artwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Assessment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentSatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("IncorporatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MuseumId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.HasIndex("RoomId");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LoanAplicationId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.LoanApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LoanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MuseumId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("LoanId")
                        .IsUnique();

                    b.HasIndex("MuseumId");

                    b.ToTable("LoanApplications");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Museum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Museums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19de75f6-06a4-4e5b-b1d5-fb820825302e"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(2910),
                            Deleted = false,
                            Name = "Louvre Museum"
                        },
                        new
                        {
                            Id = new Guid("bcb63fb6-0cc0-4e65-85ca-2fa07fbc4e45"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(2980),
                            Deleted = false,
                            Name = "British Museum"
                        },
                        new
                        {
                            Id = new Guid("9aa06adb-b590-42b1-9301-aae7f599f42c"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(2984),
                            Deleted = false,
                            Name = "London Arqueology Museum"
                        },
                        new
                        {
                            Id = new Guid("c8f4bc33-e646-4feb-8ff3-27fc19f4acff"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(2986),
                            Deleted = false,
                            Name = "New York Museum"
                        },
                        new
                        {
                            Id = new Guid("ab27caf7-d060-4736-a7c7-d568acaa6e85"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3026),
                            Deleted = false,
                            Name = "Vatican City Museum"
                        },
                        new
                        {
                            Id = new Guid("0abd4e03-0f0f-479a-adf8-8367925e0609"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3029),
                            Deleted = false,
                            Name = "Kiko's Gallery"
                        },
                        new
                        {
                            Id = new Guid("96d7e326-9e23-411c-840c-66589a001952"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3032),
                            Deleted = false,
                            Name = "LeTize Museum"
                        });
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Restoration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Restorations");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b891fb2d-fd53-4d09-816e-ef6562d6af2f"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3155),
                            Deleted = false,
                            Name = "Role 1"
                        },
                        new
                        {
                            Id = new Guid("1d9cde8f-5014-44c4-b66d-1acce9066272"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3171),
                            Deleted = false,
                            Name = "Role 2"
                        },
                        new
                        {
                            Id = new Guid("6a3cea16-99c3-403a-b8d4-6380de99ecc2"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3174),
                            Deleted = false,
                            Name = "Role 3"
                        },
                        new
                        {
                            Id = new Guid("47eb910a-26cc-40e7-933b-4f421c4f53f4"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3177),
                            Deleted = false,
                            Name = "Role 4"
                        },
                        new
                        {
                            Id = new Guid("e8ce3c0f-7314-417e-856e-65c76a615dc7"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3179),
                            Deleted = false,
                            Name = "Role 5"
                        },
                        new
                        {
                            Id = new Guid("f17acb1c-501e-44e2-9f51-54a0d6923ba5"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3182),
                            Deleted = false,
                            Name = "Role 6"
                        },
                        new
                        {
                            Id = new Guid("c691b205-77dc-4cba-a5a3-4cc344dd0ab3"),
                            AddTime = new DateTime(2022, 6, 22, 13, 34, 14, 118, DateTimeKind.Local).AddTicks(3184),
                            Deleted = false,
                            Name = "Role 7"
                        });
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RelatedUsersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("TEXT");

                    b.HasKey("RelatedUsersId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.PlasticArt", b =>
                {
                    b.HasBaseType("IMuseum.Persistence.Models.Artwork");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("PlasticArt");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Painting", b =>
                {
                    b.HasBaseType("IMuseum.Persistence.Models.PlasticArt");

                    b.Property<string>("Media")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Paintings");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Sculpture", b =>
                {
                    b.HasBaseType("IMuseum.Persistence.Models.PlasticArt");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Sculpture");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Artwork", b =>
                {
                    b.HasOne("IMuseum.Persistence.Models.Museum", "Museum")
                        .WithMany("Artworks")
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMuseum.Persistence.Models.Room", "Room")
                        .WithMany("Artworks")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Museum");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Image", b =>
                {
                    b.HasOne("IMuseum.Persistence.Models.Artwork", "Artwork")
                        .WithMany("Images")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.LoanApplication", b =>
                {
                    b.HasOne("IMuseum.Persistence.Models.Artwork", "Artwork")
                        .WithMany("LoanApplications")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMuseum.Persistence.Models.Loan", "LoanRelated")
                        .WithOne("Application")
                        .HasForeignKey("IMuseum.Persistence.Models.LoanApplication", "LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMuseum.Persistence.Models.Museum", "RelatedMuseum")
                        .WithMany("LoanApplications")
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("LoanRelated");

                    b.Navigation("RelatedMuseum");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Restoration", b =>
                {
                    b.HasOne("IMuseum.Persistence.Models.Artwork", "Artwork")
                        .WithMany("Restorations")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("IMuseum.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("RelatedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMuseum.Persistence.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.PlasticArt", b =>
                {
                    b.HasOne("IMuseum.Persistence.Models.Artwork", null)
                        .WithOne()
                        .HasForeignKey("IMuseum.Persistence.Models.PlasticArt", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Painting", b =>
                {
                    b.HasOne("IMuseum.Persistence.Models.PlasticArt", null)
                        .WithOne()
                        .HasForeignKey("IMuseum.Persistence.Models.Painting", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Sculpture", b =>
                {
                    b.HasOne("IMuseum.Persistence.Models.PlasticArt", null)
                        .WithOne()
                        .HasForeignKey("IMuseum.Persistence.Models.Sculpture", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Artwork", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("LoanApplications");

                    b.Navigation("Restorations");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Loan", b =>
                {
                    b.Navigation("Application")
                        .IsRequired();
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Museum", b =>
                {
                    b.Navigation("Artworks");

                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("IMuseum.Persistence.Models.Room", b =>
                {
                    b.Navigation("Artworks");
                });
#pragma warning restore 612, 618
        }
    }
}
